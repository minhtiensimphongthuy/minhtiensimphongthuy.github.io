// merge.js
// Usage:
//   node merge.js            -> ƒë·ªçc t·∫•t c·∫£ .json trong folder hi·ªán t·∫°i (tr·ª´ data.json) v√† ghi data.json
//   node merge.js --dir=./data --out=mydata.json
// (kh√¥ng c·∫ßn th∆∞ vi·ªán ngo√†i)
const fs = require("fs");
const path = require("path");

// üìÇ L·∫•y t·∫•t c·∫£ file .json trong th∆∞ m·ª•c hi·ªán t·∫°i (tr·ª´ data.json - file k·∫øt qu·∫£)
const files = fs.readdirSync(".")
  .filter(file => path.extname(file) === ".json" && file !== "data.json");

let allData = [];

console.log("üîé B·∫Øt ƒë·∫ßu merge d·ªØ li·ªáu t·ª´ c√°c file JSON...");
console.log("üìÇ Danh s√°ch file s·∫Ω merge:", files);

// üì• ƒê·ªçc v√† g·ªôp d·ªØ li·ªáu
files.forEach(file => {
  if (fs.existsSync(file)) {
    try {
      const raw = fs.readFileSync(file, "utf8");
      const data = JSON.parse(raw);

      if (Array.isArray(data)) {
        allData = allData.concat(data);
        console.log(`‚úÖ ƒê√£ ƒë·ªçc file ${file}, s·ªë b·∫£n ghi: ${data.length}`);
      } else {
        console.warn(`‚ö†Ô∏è File ${file} kh√¥ng ph·∫£i m·∫£ng JSON h·ª£p l·ªá!`);
      }
    } catch (err) {
      console.error(`‚ùå L·ªói khi ƒë·ªçc file ${file}:`, err.message);
    }
  } else {
    console.warn(`‚ö†Ô∏è File ${file} kh√¥ng t·ªìn t·∫°i!`);
  }
});

// üî¢ ƒê√°nh l·∫°i id t·ª´ 1 -> N
allData = allData.map((item, index) => ({
  ...item,
  id: index + 1
}));

// üíæ Xu·∫•t ra file data.json
fs.writeFileSync("data.json", JSON.stringify(allData, null, 2), "utf8");

console.log("üéâ Merge ho√†n t·∫•t!");
console.log(`üìä T·ªïng s·ªë b·∫£n ghi sau khi merge: ${allData.length}`);
console.log("üìÅ K·∫øt qu·∫£ ƒë√£ l∆∞u trong file data.json");


const fs = require("fs");
const path = require("path");

// --- parse simple CLI args ---
const argv = process.argv.slice(2);
const opts = {};
argv.forEach(a => {
  if (a.startsWith("--dir=")) opts.dir = a.split("=")[1];
  if (a.startsWith("--out=")) opts.out = a.split("=")[1];
});
const DIR = opts.dir ? path.resolve(opts.dir) : process.cwd();
const OUT = opts.out || "data.json";

console.log(`\n‚ñ∂ Merge JSON script`);
console.log(`  Folder: ${DIR}`);
console.log(`  Output: ${OUT}\n`);

// read folder
let files;
try {
  files = fs.readdirSync(DIR);
} catch (err) {
  console.error("‚ùå Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c th∆∞ m·ª•c:", DIR, err.message);
  process.exit(1);
}

// filter .json files, b·ªè file k·∫øt qu·∫£
files = files.filter(f => path.extname(f).toLowerCase() === ".json" && f !== OUT);

if (files.length === 0) {
  console.warn("‚ö†Ô∏è  Kh√¥ng t√¨m th·∫•y file .json n√†o (tr·ª´ file output).");
  process.exit(0);
}

console.log(`T√¨m th·∫•y ${files.length} file .json ƒë·ªÉ ƒë·ªçc:`);
files.forEach(f => console.log(" -", f));

let allData = [];
let totalRead = 0;
let totalObjects = 0;
let badFiles = 0;

// ƒë·ªçc t·ª´ng file
files.forEach(file => {
  const fp = path.join(DIR, file);
  if (!fs.existsSync(fp)) {
    console.warn(`‚ö†Ô∏è File ${file} kh√¥ng t·ªìn t·∫°i (b·ªè qua).`);
    badFiles++;
    return;
  }
  try {
    const raw = fs.readFileSync(fp, "utf8");
    if (!raw.trim()) {
      console.warn(`‚ö†Ô∏è File ${file} r·ªóng -> b·ªè qua.`);
      badFiles++;
      return;
    }
    const parsed = JSON.parse(raw);
    // n·∫øu l√† m·∫£ng th√¨ concat; n·∫øu object th√¨ push
    if (Array.isArray(parsed)) {
      allData = allData.concat(parsed);
      totalObjects += parsed.length;
      console.log(`  ‚úì ƒê√£ ƒë·ªçc ${file} ‚Äî ${parsed.length} b·∫£n ghi`);
    } else if (typeof parsed === "object" && parsed !== null) {
      allData.push(parsed);
      totalObjects += 1;
      console.log(`  ‚úì ƒê√£ ƒë·ªçc ${file} ‚Äî 1 object`);
    } else {
      console.warn(`‚ö†Ô∏è File ${file} kh√¥ng ph·∫£i JSON object/array -> b·ªè qua.`);
      badFiles++;
    }
    totalRead++;
  } catch (err) {
    console.error(`‚ùå L·ªói khi ƒë·ªçc/parsing ${file}:`, err.message);
    badFiles++;
  }
});

// Deduplicate theo s·ªë ƒëi·ªán tho·∫°i (property "number")
const seen = new Map();
const deduped = [];
let duplicates = 0;
allData.forEach(item => {
  const numKey = item && item.number ? String(item.number).trim() : null;
  if (numKey) {
    if (seen.has(numKey)) {
      // duplicate: gi·ªØ b·∫£n ƒë·∫ßu, b·ªè c√°c b·∫£n sau
      duplicates++;
    } else {
      seen.set(numKey, true);
      deduped.push(item);
    }
  } else {
    // n·∫øu kh√¥ng c√≥ s·ªë, v·∫´n th√™m (v√¨ c√≥ th·ªÉ l√† meta)
    deduped.push(item);
  }
});

// G√°n l·∫°i id t·ª´ 1 -> N
const finalData = deduped.map((item, index) => {
  // gi·ªØ c√°c thu·ªôc t√≠nh kh√°c, g√°n id m·ªõi (s·ªë)
  return { ...item, id: index + 1 };
});

// backup c≈© (n·∫øu c√≥)
const outPath = path.join(DIR, OUT);
if (fs.existsSync(outPath)) {
  const stamp = new Date().toISOString().replace(/[:.]/g, "-");
  const bakName = `${OUT}.bak.${stamp}.json`;
  const bakPath = path.join(DIR, bakName);
  try {
    fs.copyFileSync(outPath, bakPath);
    console.log(`\nüîí T·∫°o b·∫£n backup: ${bakName}`);
  } catch (err) {
    console.warn("‚ö†Ô∏è Kh√¥ng t·∫°o ƒë∆∞·ª£c backup:", err.message);
  }
}

// ghi file k·∫øt qu·∫£
try {
  fs.writeFileSync(outPath, JSON.stringify(finalData, null, 2), "utf8");
  console.log(`\n‚úÖ Ghi th√†nh c√¥ng ${OUT}`);
  console.log(`  File g·ªëc ƒë√£ ƒë·ªçc: ${totalRead}`);
  console.log(`  T·ªïng b·∫£n ghi (tr∆∞·ªõc dedupe): ${totalObjects}`);
  console.log(`  B·∫£n ghi sau dedupe: ${finalData.length}`);
  console.log(`  Tr√πng b·ªã lo·∫°i: ${duplicates}`);
  if (badFiles) console.log(`  Files b·ªã l·ªói / b·ªè qua: ${badFiles}`);
  console.log("\nHo√†n t·∫•t.\n");
} catch (err) {
  console.error("‚ùå L·ªói khi ghi file:", err.message);
  process.exit(1);
}

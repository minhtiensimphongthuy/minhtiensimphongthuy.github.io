const fs = require("fs");
const path = require("path");

// L·∫•y t·∫•t c·∫£ file .json trong th∆∞ m·ª•c hi·ªán t·∫°i, tr·ª´ data.json (file k·∫øt qu·∫£)
const files = fs.readdirSync(".")
  .filter(file => path.extname(file) === ".json" && file !== "data.json");

let allData = [];

// ƒê·ªçc v√† g·ªôp d·ªØ li·ªáu t·ª´ c√°c file
files.forEach(file => {
  if (fs.existsSync(file)) {
    try {
      const raw = fs.readFileSync(file, "utf8");
      const data = JSON.parse(raw);

      if (Array.isArray(data)) {
        allData = allData.concat(data);
        console.log(`üì• ƒê√£ ƒë·ªçc ${file}, s·ªë b·∫£n ghi: ${data.length}`);
      } else {
        console.warn(`‚ö†Ô∏è File ${file} kh√¥ng ph·∫£i m·∫£ng JSON h·ª£p l·ªá!`);
      }
    } catch (err) {
      console.error(`‚ùå L·ªói khi ƒë·ªçc file ${file}:`, err.message);
    }
  } else {
    console.warn(`‚ö†Ô∏è File ${file} kh√¥ng t·ªìn t·∫°i!`);
  }
});

// ƒê√°nh l·∫°i id t·ª´ 1 -> N
allData = allData.map((item, index) => ({
  ...item,
  id: index + 1
}));

// Xu·∫•t ra file data.json
fs.writeFileSync("data.json", JSON.stringify(allData, null, 2), "utf8");

console.log("‚úÖ ƒê√£ merge xong! K·∫øt qu·∫£ n·∫±m ·ªü data.json");
